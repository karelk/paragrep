#!/bin/python3

##############################################################################################################################################################
# Paragrep acts like grep, but instead of printing matching line, it prints matching paragraph. Command line options are similar to grep:
# usage:   paragrep [-A num] [-B num] [-C num] [-F] [--color] [-c] [--delimiter='string'] [-i] [-l] [-n] [-r] [-s] [-v] [-w] pattern FILE [FILE ...]
##############################################################################################################################################################

import os, sys, argparse, re

##############################################################################################################################################################
###   argparse   #############################################################################################################################################
##############################################################################################################################################################

parser = argparse.ArgumentParser()

parser.add_argument('-A','--after-context',	type=int,		help='print NUM lines after matching line')
parser.add_argument('-B','--before-context',	type=int,		help='print NUM lines before matching line')
parser.add_argument('-C','--context',		type=int,		help='print NUM lines of context')
parser.add_argument('-F','--fixed-strings',	action='store_true',	help='Interpret PATTERN as literal string')
parser.add_argument('-c','--count',		action='store_true',	help='Only print number of matching paragraphs per file')
parser.add_argument('--color',			action='store_true',	help='Force color')
parser.add_argument('--delimiter',					help='Specify Delimiter for separating paragraphs')
parser.add_argument('-i','--ignorecase',	action='store_true',	help='Ignore Case')
parser.add_argument('-l','--files-with-matches',action='store_true',	help='Only print filename')
parser.add_argument('-n','--line-number',	action='store_true',	help='Prefix each line of output with line number')
parser.add_argument('-r','--recursive',		action='store_true',	help='When "path" is a directory, search all files recursively')
parser.add_argument('-s','--supress',		action='store_true',	help="Suppress 'permission denied' error messages")
parser.add_argument('-v','--invert-match',	action='store_true',	help='Invert matching: print non-matching paragraphs')
parser.add_argument('-w','--word',		action='store_true',	help='Match only whole words')
parser.add_argument('pattern',						help='match pattern')
parser.add_argument('path',			nargs='*',		help='Path to search. If path is a directory, option -r must be used')

args = parser.parse_args()

##############################################################################################################################################################
###   set variables   ########################################################################################################################################
##############################################################################################################################################################

NL = 1

WORD_MATCH	= r'\b'					if args.word				else ''
LINE_NUMBER	= True					if args.line_number			else False
INVERT_MATCH	= -1					if args.invert_match			else 1
CASE_SENSITIVE	= re.IGNORECASE				if args.ignorecase			else 0
COLORED_STRING	= r'\033[1;31m\1\033[0m'		if (sys.stdout.isatty() or args.color)	else r'\1'

##############################################################################################################################################################
###   context   ##############################################################################################################################################
##############################################################################################################################################################

A, B		= -1, -1

if args.context:
    if (args.context > 0):
        A, B	= args.context, args.context
    else:
        sys.stderr.write(f'\n Negative context makes no sense: {args.context}\n\n')
        sys.exit(1)
else:
    if args.before_context:
        B	= args.before_context
    if args.after_context:
        A	= args.after_context

##############################################################################################################################################################
###   delimiter   ############################################################################################################################################
##############################################################################################################################################################

if args.delimiter:
    delimiter	= args.delimiter
    DELIMITER	= re.compile('^'+ delimiter +'$')
else:
    delimiter	= ''
    DELIMITER	= re.compile('^\s*$')

##############################################################################################################################################################
###   helper functions   #####################################################################################################################################
##############################################################################################################################################################

if args.fixed_strings:
    PATTERN = re.compile(r'(' + re.escape(args.pattern) + r')', flags=CASE_SENSITIVE)
else:
    PATTERN = re.compile(r'(' + WORD_MATCH + args.pattern + WORD_MATCH + r')', flags=CASE_SENSITIVE)

def listFiles(dir):
    file_list = []
    try:
        for item in os.listdir(dir):
            if os.path.isfile(os.path.join(dir,item)):
                file_list.append(os.path.join(dir,item))
            elif os.path.isdir(os.path.join(dir,item)):
                for fff in listFiles(os.path.join(dir,item)):
                    file_list.append(fff)
            else:
                if not args.supress:
                    sys.stderr.write('[Errno ] not a file or directory: %s \n' % os.path.join(dir,item))
    except OSError as err:
        if not args.supress:
            sys.stderr.write('%s\n' % err)
    return file_list

##############################################################################################################################################################
###   paragrep   #############################################################################################################################################
##############################################################################################################################################################

def paraGrep(f):
    global NL
    count = 0

    context = []
    paragraph = []

    match = (A + 2 * INVERT_MATCH)
    line_number = 0

    while True:

        # try reading line 
        try:
            line = f.readline()
        # abort if file seems to be binary
        except UnicodeDecodeError:
            return 0
 
        line_number += 1

        ######################################################################################################################################################
        if (DELIMITER.match(line) or line == ''): ###   we have reached end of paragraph or end of file  #####################################################
        ######################################################################################################################################################

            # if paragraph[] is not empty
            if paragraph:

                # append this whole paragraph to context
                context.append(paragraph[:])
                context[-1][-1].append(line)

                ##############################################################################################################################################
                if match < INVERT_MATCH: ###   if paragraph has match   ######################################################################################
                ##############################################################################################################################################

                    count += 1

                    ##########################################################################################################################################
                    ###   Do not print lines if '--count' or '--files-with-matches' was provided. Only count matching lines   ################################
                    ##########################################################################################################################################

                    if (not args.count and not args.files_with_matches):

                        # print delimiter only once at the begining, if some output is going to be printed
                        if NL:
                            print(delimiter)
                            NL = 0
 
                        ######################################################################################################################################
                        if LINE_NUMBER: ######################################################################################################################
                        ######################################################################################################################################

                            for p in context:
                                for ln in p:
                                    print('\033[0;32m%s:\033[0m %s' % (ln[0], re.sub(PATTERN, COLORED_STRING, ln[1])), end='')
                                print(delimiter)

                        ######################################################################################################################################
                        else: ################################################################################################################################
                        ######################################################################################################################################

                            for p in context:
                                for ln in p:
                                    print(re.sub(PATTERN, COLORED_STRING, ln[1]), end='')
                                print(delimiter)

                    del context[:]

                ##############################################################################################################################################
                else: ###   end of paragraph without match   #################################################################################################
                ##############################################################################################################################################

                    if (match <= A):

                        for ln in paragraph:
                            print(re.sub(PATTERN, COLORED_STRING, ln[1]), end='')

                        print(delimiter)

                        del context[:]

                ##############################################################################################################################################
                ##############################################################################################################################################
                ##############################################################################################################################################
                    
                del context[:-B]
                del paragraph[:]

            if (line == ''):
                return count

            match += INVERT_MATCH

        ######################################################################################################################################################
        else: ###  we are still inside paragraph   ###########################################################################################################
        ######################################################################################################################################################

            paragraph.append([line_number, line])
            if re.search(PATTERN, line):
                match = 0

##############################################################################################################################################################
###   main   #################################################################################################################################################
##############################################################################################################################################################

# if no match was found, exit code will be 1
return_code = 1

if args.path:
    for i in range(len(args.path)):
        if os.path.isfile(args.path[i]):
            try:
                file = open(args.path[i],'r')
                number_of_matches = paraGrep(file)
                ############################################################################
                # if match was found in file
                if number_of_matches:
                    # at least one match was found, exit code will be 0
                    return_code = 0
                    # if option '-l/--files-with-matches' was provided, print filename
                    if args.files_with_matches:
                        print('%s' % (args.path[i]))
                    # if option '-c/--count' was provided, print filename: number_of_matches
                    elif args.count:
                        print('%s: \033[1;31m%s\033[0m' % (args.path[i], number_of_matches))
                ############################################################################
                file.close()
            except IOError as err:
                if not args.supress:
                    sys.stderr.write('%s\n' % err)
            except KeyboardInterrupt:
                sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                sys.exit(1)
        elif os.path.isdir(args.path[i]):
            if not args.recursive:
                sys.stderr.write(' \033[1;31m%s\033[0m is a directory. Use option: \033[1;31m-r\033[0m  \n' % args.path[i])
                sys.exit(1)
            else:
                LINE_NUMBER = False
                for fn in listFiles(args.path[i]):
                    try:
                        file = open(fn,'r')
                        number_of_matches = paraGrep(file)
                        ############################################################################
                        # if match was found in file
                        if number_of_matches:
                            # if option '-l/--files-with-matches' was provided, print filename
                            if args.files_with_matches:
                                print('%s' % (fn))
                            # if option '-c/--count' was provided, print filename: number_of_matches
                            elif args.count:
                                print('%s: \033[1;31m%s\033[0m' % (fn, number_of_matches))
                        ############################################################################
                        file.close()
                    except IOError as err:
                        if not args.supress:
                            sys.stderr.write('%s\n' % err)
                    except KeyboardInterrupt:
                        sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                        file.close()
                        sys.exit(1)
        else:
            sys.stderr.write('[Errno ] not a file or directory: %s \n' % args.path[i])
    sys.exit(return_code)
else:
    number_of_matches = paraGrep(sys.stdin)

