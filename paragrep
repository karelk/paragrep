#!/usr/bin/python
#
# 2013, karelk@ethz.ch
#
# Paragrep: print paragraph matching pattern(s)
#
# Paragrep is simmilar to grep. But instead of printing matching line, paragrep
# will print matching paragraph (one or more lines of text, separated by whitespace
# characters). When multiple search patterns are provided, paragrep will print 
# paragraphs matching all patterns. Command line options are simmilar to grep:
#
# usage:   paragrep [-c] [-i] [-F] [-n] [-r] [-s] [-v] [-w] pattern path [path ...]
#
# for description and examples, use: paragrep --help
#

import os, sys, argparse, re

parser = argparse.ArgumentParser()
parser.add_argument('-c','--count'       , action='store_true', help='Only print number of matching paragraphs per file')
parser.add_argument('--color'            , action='store_true', help='Force color')
parser.add_argument('-F','--fixed-strings'  , action='store_true', help='Interpret PATTERN as a list of fixed strings')
parser.add_argument('-i','--ignorecase'  , action='store_true', help='Treat upper and lower characters as same')
parser.add_argument('-n','--line-number' , action='store_true', help='Prefix each line of output with line number')
parser.add_argument('-r','--recursive'   , action='store_true', help='When "path" is a directory, search all files recursively')
parser.add_argument('-s','--supress'     , action='store_true', help="Suppress 'permission denied' error messages")
parser.add_argument('-v','--invert-match', action='store_true', help='Invert matching: print non-matching paragraphs')
parser.add_argument('-w','--word'        , action='store_true', help='Match only whole words')
parser.add_argument('pattern'                                 , help='match pattern(s)')

if sys.stdin.isatty():
    parser.add_argument('path', nargs='+', help='Path to search. If path is a directory, option -r must be used')

args = parser.parse_args()

INVERT_MATCH_FLAG     =  0                      if args.invert_match                   else 1
LINE_NUMBER_FLAG      =  True                   if args.line_number                    else False
CASE_SENSITIVITY_FLAG =  re.IGNORECASE          if args.ignorecase                     else 0
WORD_MATCH_FLAG       =  r'\b'                  if args.word                           else ''
COLORED_STRING        =  r'\033[1;31m\1\033[0m' if (sys.stdout.isatty() or args.color) else r'\1'


NL = 1
WHITESPACE = re.compile('^\s+$')


if (args.fixed_strings or args.pattern in ['*','+','?']):
    PATTERN = re.compile(r'(' + re.escape(args.pattern) + r')', flags=CASE_SENSITIVITY_FLAG)
else:
    PATTERN = re.compile(r'(' + args.pattern + r')', flags=CASE_SENSITIVITY_FLAG)




def listFiles(dir):
    file_list = []
    try:
        for item in os.listdir(dir):
            if os.path.isfile(os.path.join(dir,item)):
                file_list.append(os.path.join(dir,item))
            elif os.path.isdir(os.path.join(dir,item)):
                for fff in listFiles(os.path.join(dir,item)):
                    file_list.append(fff)
            else:
                if not args.supress:
                    sys.stderr.write('[Errno ] not a file or directory: %s \n' % os.path.join(dir,item))
    except OSError as err:
        if not args.supress:
            sys.stderr.write('%s\n' % err)
    return file_list


def paraGrep(f):
    global NL
    count = 0
    paragraph = []
    line_number = 0
    match = 0

    while True:
        line = f.readline()
        line_number += 1
        if (WHITESPACE.match(line) or line == ''):
            if paragraph:
                if INVERT_MATCH_FLAG == match:
                    count += 1
                    if not args.count:
                        if NL:
			                # print newline only once at the begining, if some output is going to be printed 
                            print
                            NL = 0
                        if LINE_NUMBER_FLAG:
                            for ln in paragraph:
                                print '\033[0;32m%s:\033[0m %s' % (ln[0], re.sub(PATTERN, COLORED_STRING, ln[1])),
                        else:
                            for ln in paragraph:
                                print re.sub(PATTERN, COLORED_STRING, ln[1]),
                        print
                del paragraph[:]
            if (line == ''):
                return count
            match = 0
        else:
            paragraph.append([line_number, line])
            if re.search(PATTERN, line):
                match = 1


if sys.stdin.isatty():
    for i in range(len(args.path)):
        if os.path.isfile(args.path[i]):
            try:
                file = open(args.path[i],'r')
                number_of_matches = paraGrep(file)      
                if (args.count and number_of_matches):
                    print '%s: \033[1;31m%s\033[0m' % (args.path[i], number_of_matches)
                file.close()
            except IOError as err:
                if not args.supress:
                    sys.stderr.write('%s\n' % err)
            except KeyboardInterrupt:
                sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                sys.exit(1)
        elif os.path.isdir(args.path[i]):
            if not args.recursive:
                sys.stderr.write(' \033[1;31m%s\033[0m is a directory. Use option: \033[1;31m-r\033[0m  \n' % args.path[i])
                sys.exit(1)
            else:
                LINE_NUMBER_FLAG = False
                for fn in listFiles(args.path[i]):
                    try:
                        file = open(fn,'r')
                        number_of_matches = paraGrep(file)
                        if (args.count and number_of_matches):
                            print '%s: \033[1;31m%s\033[0m' % (fn, number_of_matches)
                        file.close()
                    except IOError as err:
                        if not args.supress:
                            sys.stderr.write('%s\n' % err)
                    except KeyboardInterrupt:
                        sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                        file.close()
                        sys.exit(1)
        else:
            sys.stderr.write('[Errno ] not a file or directory: %s \n' % args.path[i])
else:
    number_of_matches = paraGrep(sys.stdin)

