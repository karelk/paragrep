#!/bin/python3

########################################################################################################################
# Paragrep is similar to grep. But instead of printing matching line, paragrep will print matching paragraph.
#
# Command line options are similar to grep:
# usage:   paragrep [--color] [-c] [-F] [-i] [-l] [-n] [-r] [-s] [-v] [-w] pattern FILE [FILE ...]
#
# for description and examples, use: paragrep --help
########################################################################################################################

import os, sys, argparse, re

########################################################################################################################
###   argparse   #######################################################################################################
########################################################################################################################

parser = argparse.ArgumentParser()
parser.add_argument('--color'                   , action='store_true', help='Force color')
parser.add_argument('-c','--count'              , action='store_true', help='Only print number of matching paragraphs per file')
parser.add_argument('-F','--fixed-strings'      , action='store_true', help='Interpret PATTERN as literal string')
parser.add_argument('-i','--ignorecase'         , action='store_true', help='Treat upper and lower characters as same')
parser.add_argument('-l','--files-with-matches' , action='store_true', help='Only print filename')
parser.add_argument('-n','--line-number'        , action='store_true', help='Prefix each line of output with line number')
parser.add_argument('-r','--recursive'          , action='store_true', help='When "path" is a directory, search all files recursively')
parser.add_argument('-s','--supress'            , action='store_true', help="Suppress 'permission denied' error messages")
parser.add_argument('-v','--invert-match'       , action='store_true', help='Invert matching: print non-matching paragraphs')
parser.add_argument('-w','--word'               , action='store_true', help='Match only whole words')
parser.add_argument('pattern'                                        , help='match pattern')

if sys.stdin.isatty():
    parser.add_argument('path', nargs='+', help='Path to search. If path is a directory, option -r must be used')

args = parser.parse_args()

########################################################################################################################
###   set variables   ##################################################################################################
########################################################################################################################

NL = 1
WHITESPACE = re.compile('^\s+$')

WORD_MATCH	= r'\b'				if args.word				else ''
LINE_NUMBER	= True				if args.line_number			else False
INVERT_MATCH	= 0				if args.invert_match			else 1
CASE_SENSITIVE	= re.IGNORECASE			if args.ignorecase			else 0
COLORED_STRING	= r'\033[1;31m\1\033[0m'	if (sys.stdout.isatty() or args.color)	else r'\1'

########################################################################################################################
###   functions   ######################################################################################################
########################################################################################################################

if args.fixed_strings:
    PATTERN = re.compile(r'(' + re.escape(args.pattern) + r')', flags=CASE_SENSITIVE)
else:
    PATTERN = re.compile(r'(' + WORD_MATCH + args.pattern + WORD_MATCH + r')', flags=CASE_SENSITIVE)

def listFiles(dir):
    file_list = []
    try:
        for item in os.listdir(dir):
            if os.path.isfile(os.path.join(dir,item)):
                file_list.append(os.path.join(dir,item))
            elif os.path.isdir(os.path.join(dir,item)):
                for fff in listFiles(os.path.join(dir,item)):
                    file_list.append(fff)
            else:
                if not args.supress:
                    sys.stderr.write('[Errno ] not a file or directory: %s \n' % os.path.join(dir,item))
    except OSError as err:
        if not args.supress:
            sys.stderr.write('%s\n' % err)
    return file_list

def paraGrep(f):
    global NL
    count = 0
    paragraph = []
    line_number = 0
    match = 0

    while True:

        # try reading line 
        try:
            line = f.readline()
        # abort if file seems to be binary
        except UnicodeDecodeError:
            return 0
 
        line_number += 1
        if (WHITESPACE.match(line) or line == ''):
            if paragraph:
                if INVERT_MATCH == match:
                    count += 1
                    #################################################################################################################
                    # if option '-c/--count' or '-l/--files-with-matches' was provided, we don't want to print actual matching lines.
                    # We are only interested if file contains match. So we can skip the printing here.
                    if (not args.count and not args.files_with_matches):
                        if NL:
			                # print newline only once at the begining, if some output is going to be printed 
                            print()
                            NL = 0
                        if LINE_NUMBER:
                            for ln in paragraph:
                                print('\033[0;32m%s:\033[0m %s' % (ln[0], re.sub(PATTERN, COLORED_STRING, ln[1])), end='')
                        else:
                            for ln in paragraph:
                                print(re.sub(PATTERN, COLORED_STRING, ln[1]), end='')
                        print()
                    #################################################################################################################
                del paragraph[:]
            if (line == ''):
                return count
            match = 0
        else:
            paragraph.append([line_number, line])
            if re.search(PATTERN, line):
                match = 1

########################################################################################################################
###   main   ###########################################################################################################
########################################################################################################################

if sys.stdin.isatty():
    for i in range(len(args.path)):
        if os.path.isfile(args.path[i]):
            try:
                file = open(args.path[i],'r')
                number_of_matches = paraGrep(file)
                ############################################################################
                # if match was found in file
                if number_of_matches:
                    # if option '-l/--files-with-matches' was provided, print filename
                    if args.files_with_matches:
                        print('%s' % (args.path[i]))
                    # if option '-c/--count' was provided, print filename: number_of_matches
                    elif args.count:
                        print('%s: \033[1;31m%s\033[0m' % (args.path[i], number_of_matches))
                ############################################################################
                file.close()
            except IOError as err:
                if not args.supress:
                    sys.stderr.write('%s\n' % err)
            except KeyboardInterrupt:
                sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                sys.exit(1)
        elif os.path.isdir(args.path[i]):
            if not args.recursive:
                sys.stderr.write(' \033[1;31m%s\033[0m is a directory. Use option: \033[1;31m-r\033[0m  \n' % args.path[i])
                sys.exit(1)
            else:
                LINE_NUMBER = False
                for fn in listFiles(args.path[i]):
                    try:
                        file = open(fn,'r')
                        number_of_matches = paraGrep(file)
                        ############################################################################
                        # if match was found in file
                        if number_of_matches:
                            # if option '-l/--files-with-matches' was provided, print filename
                            if args.files_with_matches:
                                print('%s' % (fn))
                            # if option '-c/--count' was provided, print filename: number_of_matches
                            elif args.count:
                                print('%s: \033[1;31m%s\033[0m' % (fn, number_of_matches))
                        ############################################################################
                        file.close()
                    except IOError as err:
                        if not args.supress:
                            sys.stderr.write('%s\n' % err)
                    except KeyboardInterrupt:
                        sys.stderr.write(' \033[1;31mprogram interrupted by user\033[0m\n')
                        file.close()
                        sys.exit(1)
        else:
            sys.stderr.write('[Errno ] not a file or directory: %s \n' % args.path[i])
else:
    number_of_matches = paraGrep(sys.stdin)

